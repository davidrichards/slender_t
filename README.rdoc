= slender_t

SlenderT is a triples store  It is simple for the simple jobs.  I decided to replace a recommendation engine with a set of triples and some simple query tools, and this is the result.  I didn't want to break out the bigger tools for something that will only have hundreds of triples.

The ideas started with of "Programming the Semantic Web" by Toby Segaran et al.  Toby's code was in Python, and of course this is a Ruby version.  I've used some Ruby idioms and created an IRB application (slender_t).  

== Usage

From the command line:

tmp : slender_t
Loading SlenderT version: 0.1.1
>> st = SlenderT.new
# => SlenderT: []
>> st.add :david, :writes, :code
# => [:david, :writes, :code]
>> st.add :david, :name, "David Richards"
# => [:david, :name, "David Richards"]
>> st.add :code, :name, 'Software'
# => [:code, :name, "Software"]
>> st.find nil, :name
# => [[:david, :name, "David Richards"], [:code, :name, "Software"]]

I'll put some more exciting examples up here when I get the queries setup the way I want to have them.  I think I'll bind variables, like in the book.  We'll see, there may be a simpler, more Ruby way to query the database, I'll think about it in the morning.

You should know that you can load and save your triplet stores:

# st = SlenderT.load(some_csv_content_filename_or_url)
# st.save(some_filename)

Also, I was not trying to optimize anything.  There is a really slow operation in the add method that I should probably fix, at least.  This isn't meant to be a fast data store, just a simple one.  You may want to look at Sesame or Redland if you want to use a data set over 10,000 or 20,000 records.  Like I said, I needed 200 or 300 triplets for a mini-recommendation engine, and I just couldn't justify a full-on RDF system for that.

I'm also very interested in thinking about queries on graphs.  I have several other projects that I think could benefit from some thoughts on a simple query syntax.  I'm thinking of marginal, fathom, and overalls.  These are all belief maintenance systems of some sort (joint distribution tables, Bayesian network, and nonmonotonic reasoning respectively) that got tabled until I thought through a better way to interface them.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but
   bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2009 David Richards. See LICENSE for details.
